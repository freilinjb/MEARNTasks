{"ast":null,"code":"var _jsxFileName = \"/home/freilinjb/Escritorio/MEARNTasks/proyecto/src/components/tareas/FormTarea.jsx\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\n\nconst FormuTarea = () => {\n  //Extraer proyectos del state inicial\n  const proyectosConext = useContext(proyectoContext);\n  const {\n    proyecto\n  } = proyectosConext; //obtener la funcion del context\n\n  const tareasContext = useContext(tareaContext);\n  const {\n    tareaseleccionada,\n    errortarea,\n    agrergarTarea,\n    validarTarea,\n    obtenerTareas,\n    actualizarTarea,\n    limpiarTarea\n  } = tareasContext; //Effect que detecta si hay una tarea seleccionada\n\n  useEffect(() => {\n    if (tareaseleccionada !== null) {\n      guardarTarea(tareaseleccionada);\n    } else {\n      guardarTarea({\n        nombre: ''\n      });\n    }\n  }, [tareaseleccionada]); //State del formulario\n\n  const [tarea, guardarTarea] = useState({\n    nombre: ''\n  }); //extraer el nombrer del proyecto\n\n  const {\n    nombre\n  } = tarea; //Si no hay un proyecto seleccionado oculta el formulario Tarea\n\n  if (!proyecto) return null; //Array destructuring para extraer el proyecto actual\n\n  const [proyectoActual] = proyecto; //Leer los valores del formulario\n\n  const handleChange = e => {\n    guardarTarea({ ...tarea,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault(); //validar\n\n    if (nombre.trim() === '') {\n      validarTarea();\n      return;\n    } //Si es edicion o si es nueva tarea\n\n\n    if (tareaseleccionada === null) {\n      //agrergar la nueva tarea al state de las tareas\n      tarea.proyectoId = proyectoActual.id;\n      tarea.estado = false;\n      agrergarTarea(tarea);\n    } else {\n      //actualizar tarea existente\n      actualizarTarea(tarea); //Elimina tarea seleccionada del state\n\n      limpiarTarea();\n    } //Obtener y filtrar las tareas del proyecto actual\n\n\n    obtenerTareas(proyectoActual.id); //reiniciar el form\n\n    guardarTarea({\n      nombre: ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formulario\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"nombre\",\n    value: nombre,\n    onChange: handleChange,\n    className: \"input-text\",\n    placeholder: \"Nombre de la Tarea...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-submit btn-block\",\n    value: tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }))), errortarea ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mensaje error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 27\n    }\n  }, \"El nombrer de la tarea es obligatorio\") : null);\n};\n\nexport default FormuTarea;","map":{"version":3,"sources":["/home/freilinjb/Escritorio/MEARNTasks/proyecto/src/components/tareas/FormTarea.jsx"],"names":["React","useContext","useState","useEffect","proyectoContext","tareaContext","FormuTarea","proyectosConext","proyecto","tareasContext","tareaseleccionada","errortarea","agrergarTarea","validarTarea","obtenerTareas","actualizarTarea","limpiarTarea","guardarTarea","nombre","tarea","proyectoActual","handleChange","e","target","name","value","onSubmit","preventDefault","trim","proyectoId","id","estado"],"mappings":"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","sourcesContent":["import React,{ useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext';\n\n\nconst FormuTarea = () => {\n\n    //Extraer proyectos del state inicial\n    const proyectosConext = useContext(proyectoContext);\n    const { proyecto } = proyectosConext;\n    \n    //obtener la funcion del context\n    const tareasContext = useContext(tareaContext);\n    const { tareaseleccionada ,errortarea ,agrergarTarea, validarTarea, obtenerTareas, actualizarTarea,  limpiarTarea} = tareasContext;\n\n    //Effect que detecta si hay una tarea seleccionada\n    useEffect(() => {\n        if(tareaseleccionada!== null) {\n            guardarTarea(tareaseleccionada);\n        } else {\n            guardarTarea({\n                nombre: ''\n            });\n        }\n    }, [tareaseleccionada]);\n\n    //State del formulario\n    const [tarea, guardarTarea] = useState({\n        nombre: ''\n    })\n\n    //extraer el nombrer del proyecto\n    const { nombre} = tarea;\n\n    //Si no hay un proyecto seleccionado oculta el formulario Tarea\n    if(!proyecto) return null;\n    //Array destructuring para extraer el proyecto actual\n    \n    const [proyectoActual]= proyecto;\n\n    //Leer los valores del formulario\n    const handleChange =e=> {\n        guardarTarea({\n            ...tarea,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const onSubmit =e=> {\n        e.preventDefault();\n\n        //validar\n        if(nombre.trim() === '') {\n            validarTarea();\n            return;\n        }\n        //Si es edicion o si es nueva tarea\n        if(tareaseleccionada === null) {\n            //agrergar la nueva tarea al state de las tareas\n            tarea.proyectoId = proyectoActual.id;\n            tarea.estado = false;\n            agrergarTarea(tarea);\n        } else {\n            //actualizar tarea existente\n            actualizarTarea(tarea);\n\n            //Elimina tarea seleccionada del state\n            limpiarTarea();\n        }\n\n        //Obtener y filtrar las tareas del proyecto actual\n        obtenerTareas(proyectoActual.id);\n\n        //reiniciar el form\n        guardarTarea({\n            nombre:'' \n        });\n    }\n\n    return ( \n        <div className=\"formulario\">\n            <form onSubmit={onSubmit}>\n                <div className=\"contenedor-input\">\n                    <input type=\"text\" name=\"nombre\" value={nombre} onChange={handleChange} className=\"input-text\" placeholder=\"Nombre de la Tarea...\"/>\n                </div> \n                <div className=\"contenedor-input\">\n                    <input type=\"submit\" className=\"btn btn-primario btn-submit btn-block\" \n                    value={tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'}/>\n                </div>\n            </form>\n            {errortarea ? <p className=\"mensaje error\">El nombrer de la tarea es obligatorio</p> : null}\n        </div>\n     );\n}\n \nexport default FormuTarea;"]},"metadata":{},"sourceType":"module"}